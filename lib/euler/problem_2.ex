defmodule Euler.Problem2 do
  @moduledoc """

    # Problem 2: Even Fibonacci numbers

    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.

    ## Example

      iex> Euler.Problem2.the_answer
      4613732

  """

  def the_answer do
    fib_numbers(4000000) |> even_numbers |> sum
  end

  @doc """

    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    ## Example

      iex> Euler.Problem2.fib_numbers(89)
      [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

  """

  def fib_numbers(max_number) do
    fib_numbers([], max_number)
  end

  def fib_numbers(array, max_number) do
    if Enum.empty? array || (List.last(array) < max_number) do
      fib_numbers(append_fib_number(array), max_number)
    else
      array
    end
  end

  @doc """

    Appends the sum of the last two numbers in a list starting with 1 and 2

    ## Examples

      iex> Euler.Problem2.append_fib_number([])
      [1]

      iex> Euler.Problem2.append_fib_number([1])
      [1, 2]

      iex> Euler.Problem2.append_fib_number([1, 2])
      [1, 2, 3]

  """
  def append_fib_number([]) do
    [1]
  end

  def append_fib_number([1]) do
    [1, 2]
  end

  def append_fib_number(array) do
    n1 = List.last(array)
    n2 = Enum.at(array, Enum.count(array) - 2)

    Enum.concat(array, [n1 + n2])
  end

  @doc """

    Finds the sum of integers in a List

    ## Example

      iex> Euler.Problem2.sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
      55

  """

  def sum(list) do
    Enum.reduce list, 0, fn(x, acc) ->
      x + acc
    end
  end

  @doc """

    Returns only the even numbers in a list

    ## Example

      iex> Euler.Problem2.even_numbers([0, 1, 2, 3, 4, 5, 6, 7, 8])
      [0, 2, 4, 6, 8]

  """

  def even_numbers(list) do
    Enum.reject list, fn(x) ->
      Integer.odd?(x)
    end
  end
end
